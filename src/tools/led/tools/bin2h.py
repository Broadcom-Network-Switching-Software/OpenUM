#! /usr/bin/env python
#
# This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenUM/master/Legal/LICENSE file.
# 
# Copyright 2007-2021 Broadcom Inc. All rights reserved.
#
# Convert binary file to C header file.
#
#

import os.path
import argparse
import re
import struct
import sys
from time import gmtime, strftime

# Utility description.
Description = "Convert binary file to C header file."

def array_name_get(filename) :
    return re.sub(r"\W", "_", filename)

header = """/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * Tool: $UM/led/tools/bin2h.py
 * Date: {date}
 *
 * $Copyright: (c) 2021 Broadcom Corp.
 * All Rights Reserved. $
 */

#include <types.h>
"""

def genbin2h(filename, rootdir, outdir):

    incstart = """
#ifndef {file}
#define {file}
"""
    incend = """
#endif /* {file} */
"""

    arraydef = """
/*! {description} {length} bytes. */
static const {dtype} {array}[] = {{{content}}};
"""

    basename = os.path.basename(filename)
    outputfile = re.sub(r"\W", "_", os.path.join(outdir, basename)) + ".h"
    reltive_input = filename
    reltive_output = outputfile

    array = ""
    length = 0

    print("Convert {binf} .... to {header} \n".format(binf=reltive_input, header=outputfile))
    outfd = open(outputfile, "wt")
    fd = open(filename, "rb")

    outfd.write(header.format(date=strftime("%Y-%m-%d %H:%M:%S", gmtime())))
    s = re.sub(r"\W", "_", os.path.basename(reltive_input))

    outfd.write(incstart.format(file=s.upper()))

    while True:
        block = fd.read(8)

        if len(block):
            # Indent 4 space.
            array += "\n    "

        i = 0
        for b in block:
            # Python 2/3 compat
            if type(b) is str:
                b = ord(b)
            array += "0x{:02X},".format(b)
            i = i + 1
            if i < len(block):
                array += " "

        if len(block) == 0:
           break

        length += len(block)

    if len(array):
        array += "\n"

    fd.close()
    outfd.write(arraydef.format(dtype="uint8", \
                                length=length, \
                                array=array_name_get(basename), \
                                content=array, \
                                description="File data of " + reltive_input))

    outfd.write(incend.format(file=s.upper()))

    outfd.close()
    return reltive_output

def main():
    parser = argparse.ArgumentParser(description=Description)
    parser.add_argument('binfiles', metavar='file', type=str, nargs='+',
                         help='an binary file')

    args = parser.parse_args()
    for binfile in args.binfiles:
        genbin2h(binfile, '', '')

if __name__ == "__main__":
    main()
